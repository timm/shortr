#!/usr/bin/env lua
-- vi: filetype=lua :
local b4={}; for k,_ in pairs(_ENV) do b4[k]=k end 
local R    = require
local the  = R"the"
local lib  = R"lib"
local abcd = R"abcd"
local bin, rule                    = R"bin", R"rule"
local num, sym                     = R"num", R"sym"
local ako, egs, seen, cluster      = R"ako", R"egs", R"seen", R"cluster"
local learn101, learn201, learn301 = R"learn101", R"learn201", R"learn301"

local ish,items,o,oo,powerset = lib.ish,lib.items,lib.o,lib.oo,lib.powerset
local map,fmt,rnds, rnd = lib.map,lib.fmt,lib.rnds, lib.rnd

-- ## Convenctions:
-- lower case for instance methods, leading upper case for class methods (e.g. 
-- start ach file witha  sime new method that lists the attributes 
-- creation, management of sets of instances)
local fails=0
local function ok(test,msg)
  print("", test and "PASS "or "FAIL ",msg or "") 
  if not test then 
    fails = fails+1 ; if the and the.dump then assert(test,msg) end end end

local go={}
local function main(the,go)
  local defaults={}
  for k,v in pairs(the) do defaults[k]=v end
  local todos = defaults.todo == "all" and slots(go) or {defaults.todo}
  for _,todo in pairs(todos) do
    for k,v in pairs(defaults) do the[k]=v end
    math.randomseed(the.seed or 10019)
    if go[todo] then print("\n"..todo); go[todo]() end end 
  if b4 then
    for k,v in pairs(_ENV) do 
       if not b4[k] then print("?",k,type(v)) end end end end

---             .---------.
---             |         |
---           -= _________ =-
---              ___   ___
---             |   )=(   |
---              ---   --- 
---                 ###
---               #  =  #            "This ain't chemistry. 
---               #######             This is art."
---     _| _  _ _  _  _
---    (_|(/_| | |(_)_\

function go.copy(     t,u)
  t={a={b={c=10},d={e=200}}, f=300}
  u= lib.copy(t) 
  t.a.b.c= 20
  ok(u.a.b.c ~= 20,"copy") end

function go.rnd()
  oo(rnds{23.1111111}) end

function go.collect()
  local function aux(x,y) return x*y end
  oo(lib.collect({10,20,30},aux)) end

function go.ent()
  local a,b = lib.ent{a=9,b=7}
  ok(ish(lib.ent{a=9,b=7}, .98886), "entropy")  end

function go.items()
  for  x in items{10,20,30} do oo(x) end 
  local n=0
  for x in items(the.file) do n=n+1; if n<=5 then oo(x) end end end

function go.powerset()
  for _,x in pairs(powerset{10,20,30,40,50}) do oo(x) end end
 
 function go.many( t)
  local o,many=lib.o,lib.many
  t={};for j = 1,1000 do t[#t+1] = j end
  print(900,"+", o(many(t, 10, 900)))
  print(1,100,   o(many(t, 10,   1, 100)))
  print(300,700, o(many(t, 10, 300, 700))) end 

function go.new()
  lib.dent(seen.new{"Name","Age","gender","Weight-"}) end

-- function go.clone(   i,t,best,rest, x)
--   i={rows={},cols=nil}
--   the.file = "../etc/data/auto93.csv"
--   bins=xplain(the.file) 
--   for _,row in pairs(i.rows) do
--       x=row[col].at end end

function go.egs(  i)
  i=egs.Init(the.file) 
  ok(7==i.cols.x[2].has["lt40"], "counts")
  ok(286 == #i.rows,"egs") end

function go.dist(  i)
  local any= lib.any
  i=egs.Init(the.file) 
  local yes=true
  for j=1,1000 do 
    if (j % 50)==0 then io.write(".") end
    local d = cluster.dist(i, any(i.rows), any(i.rows)) 
    yes = yes and d>=0 and d<=1 end
  ok(yes, "dist") end 

function go.half(  i)
  the.file = "../etc/data/diabetes.csv"
  i = egs.Init(the.file) 
  local lefts,rights,left,right,border,c= cluster.half(i)
  print("rows",#i.rows)
  ok(384 == #lefts.rows,  "left")
  ok(384 == #rights.rows, "rights") end

function go.cluster(  i)
  the.file = "../etc/data/diabetes.csv"
  i = egs.Init(the.file) 
  cluster.show(cluster.new(i))
end

local function qq(i,q) 
  print(q[1], fmt("%15s = %-8s best= %s/%s rest= %s/%s",
                  i.cols[q[2]].name, q[3],q[4],q[5],q[6],q[7])) end

function go.nb1() 
  print(the.file)
  local i = learn101.learn(the.file); 
  local acc, out = learn101.score(i); print(acc); 
  local cnt={}
  for _,one in pairs(out) do local k=one.got..","..one.want; cnt[k] = 1+ (cnt[k] or 0) end
  for k,n in pairs(cnt) do print(o(k),n) end
  end

function go.nb2() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  local i = nb2(the.file); 
  abcd(i.log,true) end 

function go.nb2a() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  for _,bins in pairs{2,5,9} do
    print(bins)
    the.bins = bins
    local i = nb2(the.file); 
    abcd(i.log,true) end end

function go.bins(   t)
  local t,n = {},30
  for j=1,n do push(t, {x=j, y=j<.6*n and 1 or j<.8*n and 2 or 3}) end
  map(bins(t,20),oo) end

function go.nb3() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  the.bins = 16
  local i = nb3(the.file); 
  abcd(i.log,true)
  local acc, out = score(i);  map(out,function(q) qq(i,q) end) end
--------------------------------------------------------------------------------
os.exit( lib.onTheGo(the,go) )
