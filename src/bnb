#!/usr/bin/env lua
-- vi: filetype=lua :
-- BSD 2-Clause License
-- Copyright (c) 2022, Tim Menzies
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:

-- 1. Redistributions of source code must retain the above copyright notice,this
--    list of conditions and the following disclaimer.
--
-- 2. Redistributions in binary form must reproduce the above copyright notice,
--    this list of conditions and the following disclaimer in the documentation
--    and/or other materials provided with the distribution.

-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-- AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-- IMPLIED WARRANTIES OF MERCHANTABILITY & FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-- SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

local b4={}; for k,_ in pairs(_ENV) do b4[k]=k end 
local r    = require
local the  = r"the"
local lib  = r"lib"
local abcd = r"abcd"
local bin, rule           = r"bin", r"rule"
local num,sym             = r"num", r"sym"
local ako, egs, summary   = r"ako", r"egs", r"summary"
local learna,learnb,learnc= r"learna", r"learnb", r"learnc"

local ish,items,o,oo,powerset = lib.ish,lib.items,lib.o,lib.oo,lib.powerset
local rnds, rnd = lib.rnds, lib.rnd
-- ## Convenctions:
-- lower case for instance methods, upper case for class methods (e.g. 
-- creation, management of sets of instances)
---     _| _  _ _  _  _
---    (_|(/_| | |(_)_\

local fails=0
local function ok(test,msg)
  print("", test and "PASS "or "FAIL ",msg or "") 
  if not test then 
    fails = fails+1 ; if the and the.dump then assert(test,msg) end end end

local demo={}
function demo.copy(     t,u)
  t={a={b={c=10},d={e=200}}, f=300}
  u= lib.copy(t) 
  t.a.b.c= 20
  print(u.a.b.c) 
  oo(t)
  oo(u)
  lib.dent(u)
  end

function demo.rnd()
  oo(rnds{23.1111111}) end

function demo.collect()
  local function aux(x,y) return x*y end
  oo(lib.collect({10,20,30},aux)) end

function demo.ent()
  local a,b = lib.ent{a=9,b=7}
  print(a,b)
  ok(ish(lib.ent{a=9,b=7}, .98886), "entropy")  end

function demo.items()
  for  x in items{10,20,30} do print(x) end 
  local n=0
  print(33)
  for  x in items(the.file) do n=n+1; if n<=5 then print(100); oo(x) end end end

function demo.powerset()
  for _,x in pairs(powerset{10,20,30,40,50}) do oo(x) end end
 
 function demo.many( t)
  t={};for j = 1,1000 do t[#t+1] = j end
  print(900,"+", o(many(t,10,900)))
  print(1,100,o(many(t,10,1,100)))
  print(300,700, o(many(t,10,300,700))) end 

function demo.new()
  dent(summary.new{"Name","Age","gender","Weight-"}) end

function demo.clone(   i,t,best,rest, x)
  i={rows={},cols=nil}
  the.file = "../etc/data/auto93.csv"
  bins=xplain(the.file) 
  for _,row in pairs(i.rows) do
      x=row[col].at end end

local function qq(i,q) 
  print(q[1], fmt("%15s = %-8s best= %s/%s rest= %s/%s",i.cols[q[2]].name, q[3],q[4],q[5],q[6],q[7])) end

function demo.nb1() 
  local i = nb1(the.file); 
  local acc, out = score(i); print(acc); map(out,function(q) qq(i,q) end) end

function demo.nb2() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  local i = nb2(the.file); 
  abcd(i.log,true) end 

function demo.nb2a() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  for _,bins in pairs{2,5,9} do
    print(bins)
    the.bins = bins
    local i = nb2(the.file); 
    abcd(i.log,true)
    --local acc, out = score(i); print(acc)
    --map(out,function(q) q4(i,q) end)  end end
end end

function demo.bins(   t)
  local t,n = {},30
  for j=1,n do push(t, {x=j, y=j<.6*n and 1 or j<.8*n and 2 or 3}) end
  map(bins(t,20),oo)
end

function demo.nb3() 
  the.file = "../etc/data/diabetes.csv" 
  the.goal = "positive"
  the.bins = 16
  local i = nb3(the.file); 
  abcd(i.log,true)
  local acc, out = score(i);  map(out,function(q) qq(i,q) end) 
end

-------------------------------------------------------------------------------                      
fails = 0
local defaults=lib.copy(the)
local todos = defaults.todo == "all" and slots(demo) or {defaults.todo}
for _,todo in pairs(todos) do
  the = lib.copy(defaults)
  math.randomseed(the.seed or 10019)
  print(">>",demo,todo)
  if demo[todo] then demo[todo]() end end 

for k,v in pairs(_ENV) do if not b4[k] then print("??",k,type(v)) end end 
os.exit(fails)

---             .---------.
---             |         |
---           -= _________ =-
---              ___   ___
---             |   )=(   |
---              ---   --- 
---                 ###
---               #  =  #            "This ain't chemistry. 
---               #######             This is art."
