<img 
align=right width=250 src=heads2.png>
<a 
href="https://zenodo.org/badge/latestdoi/206205826"> <img src="https://zenodo.org/badge/206205826.svg" alt="DOI"></a> <img 
src="https://img.shields.io/badge/platform-osx,linux-informational?logo=linux&logoColor=white&color=red"> <img 
src="https://img.shields.io/badge/purpose-se,ai-informational?logo=hyper&logoColor=white&color=orange"> <img 
src="https://img.shields.io/badge/language-lua-informational?logo=lua&logoColor=white&color=yellow"> <a
href="https://github.com/timm/l5/actions/workflows/tests.yml"><img src="https://github.com/timm/l5/actions/workflows/tests.yml/badge.svg"></a><br><a
href="https://github.com/timm/l5/blob/master/LICENSE.md#top"><img src="https://img.shields.io/badge/license-BSD2-informational?logo=adblock&logoColor=white&color=blueviolet"></a>
<br>
&copy;2022, <a href="mailto:timm@ieee.org">Tim Menzies</a>
<br clear=all>
<ul>
<li> How long does it take to find  rules that identify the "best" ideas?
Let's find out.

<li>We know that after <em>N</em> samples, we can find an event of probability
<em>P</em> with confidence <em>C=1-(1-P) <sup>N</sup></em>.
Rearranged, this  implies  <em>N=log(1-C)/log(1-P)</em>.

<li> Now suppose some order predict can sort items into a linear
list, with  <em>p</em> best examples.  Then with confidence
<em>C</em>, after  <em>N=log2(log(1-C)/log(1-P))</em> random probes,
we can find those best  <em>P</em>.
Statisticians tell us that it is hard to distinguish items
that are less that .35*&sigma;</em> apart.  Therefore,  for items
across &pm;3&sigma;</em> has a region of size  <em>P=.35/(2*3)=5.8%</em>
that is indistinguishable from the top item.
This means that at confidence  <em>C=0.99</em>, <em>N=6</em>
random samples should be enough to find that best region.

<li> Let load some items, sort
them using the Zitzler predicate, and label the top 6% as "good"
(this is our ground truth).  Then lets pick 3 items at random, sort
them (using Zitzler), and analyze all items by their likelihood of
being "best" (nearest the top item) or "rest?" (i.e. not "best").
After that, then loop over evaluated the most likely item, sort all
the evaluated, and re-analyze all items as likely to be "best" or
"rest".
</ul>
